Processing and Formatting Strings

    - Using f-strings to interpolate expressions and apply formatting
    - Converting strings to other applicable data types
    - Using regular expressions for advanced string processing
        - not excited for RegEx shit...

    F-String: a string literal that is prefixed with f or F, and allows expressions to be embedded directly 
        inside curly braces {}.
        - ex:
            name = "Alice"
            age = 30
            greeting = f"My name is {name} and I am {age} years old."
            print(greeting)
            # Output: My name is Alice and I am 30 years old.

    - Use F-Strings when you use strings as an output and have to deal with other variables
        - use the {} to interpolate other data types into the string
        - F-Strings are also more readable than other interpolation methods
            - string interpolation means inserting variable values directly into a string

        - ex:
            task_f = f"Name: {name}; Urgency Level: {urgency}"

            assert task == task_f == "Name: Homework; Urgency Level 5"
        
            - assert is a Python keyword used t ocreate an assertion statement, which evaluates the supplied
                condition. When the condition is TRUE, the program continues its execution. When the condition is
                FALSE, execution stops, and the program raises an AssertionError
        
        - F-Strings also support custom class instances

    - Using f-strings to interpolate expressions
        - f-strings can be used to interpolate expressions, which eliminates the need to create intermediate
            variables.
            - this means you can access data structures, call functions, or do calculations in the f-string
                ex:
                f"First Task: {tasks[0]}" 
                    - This syntax allows us to access the 0th (or first) element in the list "tasks"
                f"Task Name: {task_name.title()}"
                    - This syntax calls the title method of the task_name class and outputs the answer into our 
                        formatted string
                f"Square: {number * number}
                    - This example does the calculation of multiplying the inputted number by itself and then putting
                        the result of that calculation into the f-string
    
    - expressions vs statements
        - expression: a piece of code that produce a value when evaluated, and is usually one line of code
        - statement: A complete instruction that does something, like creating a cariable or controlling flow.

    - Although f-strings interpolate expressions natively, we should use this skill with caution because any
        complicated expressions in an f-string compromise the readability of your code
            - ex:
                summary_text = f"Your average Score: {sum([95, 98, 97, 96, 97, 93]) / len(95, 98, 97, 96, 97, 93)}."
                - while this will technically work, it does suck
                    - the solution here is probably to seperately define the list in a different line and then
                        reference it within the f-string
                    fix: 
                        grades = [95, 98, 97, 96, 97, 93]
                        summary_text = f"Your Average Score: {sum(grades) / len(grades)}."
                    
                    - you could go even further and do the calculation outside of the f-string to make the f-string
                        definition a little cleaner
                    fix:
                        grades = [95, 98, 97, 96, 97, 93]
                        avg = sum(grades) / len(grades)
                        summary_text = f"Your Average Score: {grades}."

    - F-strings are able to have specifiers added to them in order to have them format in certain ways
        - F-string specifiers are formatting instructions used inside f-strings to control how values are 
            displayed â€” such as number of decimal places, alignment, width, percentage, or date formatting.
        - ex:
            f"{value:specifier}"
                - value: the variable or expression
                - ":" : introduces the format specifier
                - specifier: tells Python how to format the value
        - Common F-String Specifiers:
            - .2f -> fixed-point, 2 decimal places (3.14)
            - , -> Adds a thousands seperator (1,000)
            -  >10 -> Right-align in 10-character width (" 42")
            - <10 -> Left-align in 10-character width ("42 ")
            - ^10 -> Center-align in 10-character width (" 42 ")
            - % -> Percentage (multiplies by 100 and adds a %) (75.00%)
            - b, x, o -> Binary, hex, octal formatting (0b1010, 0xa, 0o12)

            - datetime objects also have f-string specifiers but are a little more involved
            - all of the numbers in aligning, decimal points, etc can be changed they don't
                have to be the numbers in the examples
        
        - Common F-String Specifiers for numbers (extended from previous list):
            - c -> Unicode representation of the integer
            - d -> decimal format, using base 10
            - 2e -> sceintific notation 
            - 2g -> General format, automatically applying e or f
        
    - Maintainability: We constantly spot opportunities to refactor our code, usually at a "local" level.
        The local optimization may seem to be insignificant, but these small improvements add up and determine
        the entire project's overall maintainability 
        - This is really important for projects that need to be held up for a long time especially when languages
            get updated

    - Although directly interpolating expressions by f-strings makes code cleaner, avoid using complicated 
        expressions in f-strings, which may confuse your readers
    - While traditional ways of interpolating strings can be used in Python, there's no need to actually use
        them since the f-string style is easier to use and read

    - How to convert strings to retrieve the represented data
        - Most things that you can type on a keyboard is a string
        - when dealing with "input" from the terminal the inputted data will be interpreted as a string 
            even though it might be a number or list, etc.
        - isalnum() is a inherit method for the String Class that allows you to check to see whether the
            string is alphanumeric - meaning that it contains ONLY numbers and letters
            - ex:
                bad_username0 = "123!@#"
                assert bad_username0.isalnum() == False 

                bad_username1 = "abc..."
                assert bad_username1.isalnum() == False 

                good_username = "1a2b3c"
                assert good_username.isalnum() == True
        - isalpha() is an inherit method for the String Class that allows you to check whether or not the 
            string is only letters
            - is ALPHA, alphabet, letters... get it?
            - all of htese methods that have a "is" as a prefix are returning True or False
            - ex.
                assert "Homework".isalpha() == True
                assert "Homework123".isalpha() == False
        - isnumeric() is an inherit method for the String Class that allows you to check whether or not the 
            string is only numbers
            - isdecimal() - checkis if all characters are decimal digits (0-9 ONLY)
            - isdigit - Checks if all characters are digits including supersripts, subscripts, and decimal digits
            - all isdecimal are also isdigit, and all is digit are also isnumeric
            - seems like there are sometimes where you would want to be more specific with your checks, since the three     
                methods go up in terms of specificity

    - Casting strings to numbers
        - in programming, casting means to convert one data type to another data type
            - this is used a lot of times with user inputted data in order to convert it to a data type that 
                the code can use besides a String.
            